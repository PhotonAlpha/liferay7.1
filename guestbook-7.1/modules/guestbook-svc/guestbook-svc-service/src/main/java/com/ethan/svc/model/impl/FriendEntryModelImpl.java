/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ethan.svc.model.impl;

import com.ethan.svc.model.FriendEntry;
import com.ethan.svc.model.FriendEntryModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FriendEntry service. Represents a row in the &quot;gb_FriendEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FriendEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FriendEntryImpl}.
 * </p>
 *
 * @author ethan
 * @see FriendEntryImpl
 * @generated
 */
public class FriendEntryModelImpl
	extends BaseModelImpl<FriendEntry> implements FriendEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a friend entry model instance should use the <code>FriendEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "gb_FriendEntry";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"entryId", Types.BIGINT},
		{"name", Types.VARCHAR}, {"email", Types.VARCHAR},
		{"message", Types.VARCHAR}, {"guestbookId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("entryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("message", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("guestbookId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table gb_FriendEntry (uuid_ VARCHAR(75) null,entryId LONG not null primary key,name VARCHAR(75) null,email VARCHAR(75) null,message VARCHAR(75) null,guestbookId LONG,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table gb_FriendEntry";

	public static final String ORDER_BY_JPQL =
		" ORDER BY friendEntry.entryId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY gb_FriendEntry.entryId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		com.ethan.svc.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.com.ethan.svc.model.FriendEntry"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		com.ethan.svc.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.com.ethan.svc.model.FriendEntry"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		com.ethan.svc.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.com.ethan.svc.model.FriendEntry"),
		true);

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long ENTRYID_COLUMN_BITMASK = 8L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.ethan.svc.service.util.ServiceProps.get(
			"lock.expiration.time.com.ethan.svc.model.FriendEntry"));

	public FriendEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _entryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _entryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FriendEntry.class;
	}

	@Override
	public String getModelClassName() {
		return FriendEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FriendEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FriendEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FriendEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FriendEntry)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FriendEntry, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FriendEntry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FriendEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FriendEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FriendEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, FriendEntry>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			FriendEntry.class.getClassLoader(), FriendEntry.class,
			ModelWrapper.class);

		try {
			Constructor<FriendEntry> constructor =
				(Constructor<FriendEntry>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<FriendEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<FriendEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<FriendEntry, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<FriendEntry, Object>>();
		Map<String, BiConsumer<FriendEntry, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<FriendEntry, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<FriendEntry, Object>() {

				@Override
				public Object apply(FriendEntry friendEntry) {
					return friendEntry.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<FriendEntry, Object>() {

				@Override
				public void accept(FriendEntry friendEntry, Object uuidObject) {
					friendEntry.setUuid((String)uuidObject);
				}

			});
		attributeGetterFunctions.put(
			"entryId",
			new Function<FriendEntry, Object>() {

				@Override
				public Object apply(FriendEntry friendEntry) {
					return friendEntry.getEntryId();
				}

			});
		attributeSetterBiConsumers.put(
			"entryId",
			new BiConsumer<FriendEntry, Object>() {

				@Override
				public void accept(
					FriendEntry friendEntry, Object entryIdObject) {

					friendEntry.setEntryId((Long)entryIdObject);
				}

			});
		attributeGetterFunctions.put(
			"name",
			new Function<FriendEntry, Object>() {

				@Override
				public Object apply(FriendEntry friendEntry) {
					return friendEntry.getName();
				}

			});
		attributeSetterBiConsumers.put(
			"name",
			new BiConsumer<FriendEntry, Object>() {

				@Override
				public void accept(FriendEntry friendEntry, Object nameObject) {
					friendEntry.setName((String)nameObject);
				}

			});
		attributeGetterFunctions.put(
			"email",
			new Function<FriendEntry, Object>() {

				@Override
				public Object apply(FriendEntry friendEntry) {
					return friendEntry.getEmail();
				}

			});
		attributeSetterBiConsumers.put(
			"email",
			new BiConsumer<FriendEntry, Object>() {

				@Override
				public void accept(
					FriendEntry friendEntry, Object emailObject) {

					friendEntry.setEmail((String)emailObject);
				}

			});
		attributeGetterFunctions.put(
			"message",
			new Function<FriendEntry, Object>() {

				@Override
				public Object apply(FriendEntry friendEntry) {
					return friendEntry.getMessage();
				}

			});
		attributeSetterBiConsumers.put(
			"message",
			new BiConsumer<FriendEntry, Object>() {

				@Override
				public void accept(
					FriendEntry friendEntry, Object messageObject) {

					friendEntry.setMessage((String)messageObject);
				}

			});
		attributeGetterFunctions.put(
			"guestbookId",
			new Function<FriendEntry, Object>() {

				@Override
				public Object apply(FriendEntry friendEntry) {
					return friendEntry.getGuestbookId();
				}

			});
		attributeSetterBiConsumers.put(
			"guestbookId",
			new BiConsumer<FriendEntry, Object>() {

				@Override
				public void accept(
					FriendEntry friendEntry, Object guestbookIdObject) {

					friendEntry.setGuestbookId((Long)guestbookIdObject);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<FriendEntry, Object>() {

				@Override
				public Object apply(FriendEntry friendEntry) {
					return friendEntry.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<FriendEntry, Object>() {

				@Override
				public void accept(
					FriendEntry friendEntry, Object groupIdObject) {

					friendEntry.setGroupId((Long)groupIdObject);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<FriendEntry, Object>() {

				@Override
				public Object apply(FriendEntry friendEntry) {
					return friendEntry.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<FriendEntry, Object>() {

				@Override
				public void accept(
					FriendEntry friendEntry, Object companyIdObject) {

					friendEntry.setCompanyId((Long)companyIdObject);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<FriendEntry, Object>() {

				@Override
				public Object apply(FriendEntry friendEntry) {
					return friendEntry.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<FriendEntry, Object>() {

				@Override
				public void accept(
					FriendEntry friendEntry, Object userIdObject) {

					friendEntry.setUserId((Long)userIdObject);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<FriendEntry, Object>() {

				@Override
				public Object apply(FriendEntry friendEntry) {
					return friendEntry.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<FriendEntry, Object>() {

				@Override
				public void accept(
					FriendEntry friendEntry, Object userNameObject) {

					friendEntry.setUserName((String)userNameObject);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<FriendEntry, Object>() {

				@Override
				public Object apply(FriendEntry friendEntry) {
					return friendEntry.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<FriendEntry, Object>() {

				@Override
				public void accept(
					FriendEntry friendEntry, Object createDateObject) {

					friendEntry.setCreateDate((Date)createDateObject);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<FriendEntry, Object>() {

				@Override
				public Object apply(FriendEntry friendEntry) {
					return friendEntry.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<FriendEntry, Object>() {

				@Override
				public void accept(
					FriendEntry friendEntry, Object modifiedDateObject) {

					friendEntry.setModifiedDate((Date)modifiedDateObject);
				}

			});
		attributeGetterFunctions.put(
			"status",
			new Function<FriendEntry, Object>() {

				@Override
				public Object apply(FriendEntry friendEntry) {
					return friendEntry.getStatus();
				}

			});
		attributeSetterBiConsumers.put(
			"status",
			new BiConsumer<FriendEntry, Object>() {

				@Override
				public void accept(
					FriendEntry friendEntry, Object statusObject) {

					friendEntry.setStatus((Integer)statusObject);
				}

			});
		attributeGetterFunctions.put(
			"statusByUserId",
			new Function<FriendEntry, Object>() {

				@Override
				public Object apply(FriendEntry friendEntry) {
					return friendEntry.getStatusByUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"statusByUserId",
			new BiConsumer<FriendEntry, Object>() {

				@Override
				public void accept(
					FriendEntry friendEntry, Object statusByUserIdObject) {

					friendEntry.setStatusByUserId((Long)statusByUserIdObject);
				}

			});
		attributeGetterFunctions.put(
			"statusByUserName",
			new Function<FriendEntry, Object>() {

				@Override
				public Object apply(FriendEntry friendEntry) {
					return friendEntry.getStatusByUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"statusByUserName",
			new BiConsumer<FriendEntry, Object>() {

				@Override
				public void accept(
					FriendEntry friendEntry, Object statusByUserNameObject) {

					friendEntry.setStatusByUserName(
						(String)statusByUserNameObject);
				}

			});
		attributeGetterFunctions.put(
			"statusDate",
			new Function<FriendEntry, Object>() {

				@Override
				public Object apply(FriendEntry friendEntry) {
					return friendEntry.getStatusDate();
				}

			});
		attributeSetterBiConsumers.put(
			"statusDate",
			new BiConsumer<FriendEntry, Object>() {

				@Override
				public void accept(
					FriendEntry friendEntry, Object statusDateObject) {

					friendEntry.setStatusDate((Date)statusDateObject);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getEntryId() {
		return _entryId;
	}

	@Override
	public void setEntryId(long entryId) {
		_entryId = entryId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@Override
	public String getMessage() {
		if (_message == null) {
			return "";
		}
		else {
			return _message;
		}
	}

	@Override
	public void setMessage(String message) {
		_message = message;
	}

	@Override
	public long getGuestbookId() {
		return _guestbookId;
	}

	@Override
	public void setGuestbookId(long guestbookId) {
		_guestbookId = guestbookId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(FriendEntry.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FriendEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FriendEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FriendEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FriendEntryImpl friendEntryImpl = new FriendEntryImpl();

		friendEntryImpl.setUuid(getUuid());
		friendEntryImpl.setEntryId(getEntryId());
		friendEntryImpl.setName(getName());
		friendEntryImpl.setEmail(getEmail());
		friendEntryImpl.setMessage(getMessage());
		friendEntryImpl.setGuestbookId(getGuestbookId());
		friendEntryImpl.setGroupId(getGroupId());
		friendEntryImpl.setCompanyId(getCompanyId());
		friendEntryImpl.setUserId(getUserId());
		friendEntryImpl.setUserName(getUserName());
		friendEntryImpl.setCreateDate(getCreateDate());
		friendEntryImpl.setModifiedDate(getModifiedDate());
		friendEntryImpl.setStatus(getStatus());
		friendEntryImpl.setStatusByUserId(getStatusByUserId());
		friendEntryImpl.setStatusByUserName(getStatusByUserName());
		friendEntryImpl.setStatusDate(getStatusDate());

		friendEntryImpl.resetOriginalValues();

		return friendEntryImpl;
	}

	@Override
	public int compareTo(FriendEntry friendEntry) {
		long primaryKey = friendEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FriendEntry)) {
			return false;
		}

		FriendEntry friendEntry = (FriendEntry)object;

		long primaryKey = friendEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_originalUuid = _uuid;

		_originalGroupId = _groupId;

		_setOriginalGroupId = false;

		_originalCompanyId = _companyId;

		_setOriginalCompanyId = false;

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FriendEntry> toCacheModel() {
		FriendEntryCacheModel friendEntryCacheModel =
			new FriendEntryCacheModel();

		friendEntryCacheModel.uuid = getUuid();

		String uuid = friendEntryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			friendEntryCacheModel.uuid = null;
		}

		friendEntryCacheModel.entryId = getEntryId();

		friendEntryCacheModel.name = getName();

		String name = friendEntryCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			friendEntryCacheModel.name = null;
		}

		friendEntryCacheModel.email = getEmail();

		String email = friendEntryCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			friendEntryCacheModel.email = null;
		}

		friendEntryCacheModel.message = getMessage();

		String message = friendEntryCacheModel.message;

		if ((message != null) && (message.length() == 0)) {
			friendEntryCacheModel.message = null;
		}

		friendEntryCacheModel.guestbookId = getGuestbookId();

		friendEntryCacheModel.groupId = getGroupId();

		friendEntryCacheModel.companyId = getCompanyId();

		friendEntryCacheModel.userId = getUserId();

		friendEntryCacheModel.userName = getUserName();

		String userName = friendEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			friendEntryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			friendEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			friendEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			friendEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			friendEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		friendEntryCacheModel.status = getStatus();

		friendEntryCacheModel.statusByUserId = getStatusByUserId();

		friendEntryCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = friendEntryCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			friendEntryCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			friendEntryCacheModel.statusDate = statusDate.getTime();
		}
		else {
			friendEntryCacheModel.statusDate = Long.MIN_VALUE;
		}

		return friendEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FriendEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FriendEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FriendEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((FriendEntry)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<FriendEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<FriendEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FriendEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((FriendEntry)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FriendEntry>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _originalUuid;
	private long _entryId;
	private String _name;
	private String _email;
	private String _message;
	private long _guestbookId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _columnBitmask;
	private FriendEntry _escapedModel;

}