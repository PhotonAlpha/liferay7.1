/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ethan.svc.service.base;

import com.ethan.svc.model.FriendEntry;
import com.ethan.svc.service.FriendEntryLocalService;
import com.ethan.svc.service.persistence.FriendEntryPersistence;
import com.ethan.svc.service.persistence.GuestbookEntryPersistence;
import com.ethan.svc.service.persistence.GuestbookPersistence;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandler;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerRegistryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Criterion;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Disjunction;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.dao.orm.Property;
import com.liferay.portal.kernel.dao.orm.PropertyFactoryUtil;
import com.liferay.portal.kernel.dao.orm.RestrictionsFactoryUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.BasePersistence;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the friend entry local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.ethan.svc.service.impl.FriendEntryLocalServiceImpl}.
 * </p>
 *
 * @author ethan
 * @see com.ethan.svc.service.impl.FriendEntryLocalServiceImpl
 * @generated
 */
public abstract class FriendEntryLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements FriendEntryLocalService, IdentifiableOSGiService {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>FriendEntryLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>com.ethan.svc.service.FriendEntryLocalServiceUtil</code>.
	 */

	/**
	 * Adds the friend entry to the database. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect FriendEntryLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param friendEntry the friend entry
	 * @return the friend entry that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public FriendEntry addFriendEntry(FriendEntry friendEntry) {
		friendEntry.setNew(true);

		return friendEntryPersistence.update(friendEntry);
	}

	/**
	 * Creates a new friend entry with the primary key. Does not add the friend entry to the database.
	 *
	 * @param entryId the primary key for the new friend entry
	 * @return the new friend entry
	 */
	@Override
	@Transactional(enabled = false)
	public FriendEntry createFriendEntry(long entryId) {
		return friendEntryPersistence.create(entryId);
	}

	/**
	 * Deletes the friend entry with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect FriendEntryLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param entryId the primary key of the friend entry
	 * @return the friend entry that was removed
	 * @throws PortalException if a friend entry with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public FriendEntry deleteFriendEntry(long entryId) throws PortalException {
		return friendEntryPersistence.remove(entryId);
	}

	/**
	 * Deletes the friend entry from the database. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect FriendEntryLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param friendEntry the friend entry
	 * @return the friend entry that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public FriendEntry deleteFriendEntry(FriendEntry friendEntry) {
		return friendEntryPersistence.remove(friendEntry);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(
			FriendEntry.class, clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return friendEntryPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>com.ethan.svc.model.impl.FriendEntryModelImpl</code>.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {

		return friendEntryPersistence.findWithDynamicQuery(
			dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>com.ethan.svc.model.impl.FriendEntryModelImpl</code>.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<T> orderByComparator) {

		return friendEntryPersistence.findWithDynamicQuery(
			dynamicQuery, start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return friendEntryPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(
		DynamicQuery dynamicQuery, Projection projection) {

		return friendEntryPersistence.countWithDynamicQuery(
			dynamicQuery, projection);
	}

	@Override
	public FriendEntry fetchFriendEntry(long entryId) {
		return friendEntryPersistence.fetchByPrimaryKey(entryId);
	}

	/**
	 * Returns the friend entry matching the UUID and group.
	 *
	 * @param uuid the friend entry's UUID
	 * @param groupId the primary key of the group
	 * @return the matching friend entry, or <code>null</code> if a matching friend entry could not be found
	 */
	@Override
	public FriendEntry fetchFriendEntryByUuidAndGroupId(
		String uuid, long groupId) {

		return friendEntryPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the friend entry with the primary key.
	 *
	 * @param entryId the primary key of the friend entry
	 * @return the friend entry
	 * @throws PortalException if a friend entry with the primary key could not be found
	 */
	@Override
	public FriendEntry getFriendEntry(long entryId) throws PortalException {
		return friendEntryPersistence.findByPrimaryKey(entryId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery =
			new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(friendEntryLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(FriendEntry.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("entryId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery
		getIndexableActionableDynamicQuery() {

		IndexableActionableDynamicQuery indexableActionableDynamicQuery =
			new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(
			friendEntryLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(FriendEntry.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("entryId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {

		actionableDynamicQuery.setBaseLocalService(friendEntryLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(FriendEntry.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("entryId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {

		final ExportActionableDynamicQuery exportActionableDynamicQuery =
			new ExportActionableDynamicQuery() {

				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary =
						portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(
						stagedModelType, modelAdditionCount);

					long modelDeletionCount =
						ExportImportHelperUtil.getModelDeletionCount(
							portletDataContext, stagedModelType);

					manifestSummary.addModelDeletionCount(
						stagedModelType, modelDeletionCount);

					return modelAdditionCount;
				}

			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(
			new ActionableDynamicQuery.AddCriteriaMethod() {

				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					Criterion modifiedDateCriterion =
						portletDataContext.getDateRangeCriteria("modifiedDate");

					Criterion statusDateCriterion =
						portletDataContext.getDateRangeCriteria("statusDate");

					if ((modifiedDateCriterion != null) &&
						(statusDateCriterion != null)) {

						Disjunction disjunction =
							RestrictionsFactoryUtil.disjunction();

						disjunction.add(modifiedDateCriterion);
						disjunction.add(statusDateCriterion);

						dynamicQuery.add(disjunction);
					}

					Property workflowStatusProperty =
						PropertyFactoryUtil.forName("status");

					if (portletDataContext.isInitialPublication()) {
						dynamicQuery.add(
							workflowStatusProperty.ne(
								WorkflowConstants.STATUS_IN_TRASH));
					}
					else {
						StagedModelDataHandler<?> stagedModelDataHandler =
							StagedModelDataHandlerRegistryUtil.
								getStagedModelDataHandler(
									FriendEntry.class.getName());

						dynamicQuery.add(
							workflowStatusProperty.in(
								stagedModelDataHandler.
									getExportableStatuses()));
					}
				}

			});

		exportActionableDynamicQuery.setCompanyId(
			portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(
			new ActionableDynamicQuery.PerformActionMethod<FriendEntry>() {

				@Override
				public void performAction(FriendEntry friendEntry)
					throws PortalException {

					StagedModelDataHandlerUtil.exportStagedModel(
						portletDataContext, friendEntry);
				}

			});
		exportActionableDynamicQuery.setStagedModelType(
			new StagedModelType(
				PortalUtil.getClassNameId(FriendEntry.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {

		return friendEntryLocalService.deleteFriendEntry(
			(FriendEntry)persistedModel);
	}

	public BasePersistence<FriendEntry> getBasePersistence() {
		return friendEntryPersistence;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return friendEntryPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the friend entries matching the UUID and company.
	 *
	 * @param uuid the UUID of the friend entries
	 * @param companyId the primary key of the company
	 * @return the matching friend entries, or an empty list if no matches were found
	 */
	@Override
	public List<FriendEntry> getFriendEntriesByUuidAndCompanyId(
		String uuid, long companyId) {

		return friendEntryPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of friend entries matching the UUID and company.
	 *
	 * @param uuid the UUID of the friend entries
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of friend entries
	 * @param end the upper bound of the range of friend entries (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching friend entries, or an empty list if no matches were found
	 */
	@Override
	public List<FriendEntry> getFriendEntriesByUuidAndCompanyId(
		String uuid, long companyId, int start, int end,
		OrderByComparator<FriendEntry> orderByComparator) {

		return friendEntryPersistence.findByUuid_C(
			uuid, companyId, start, end, orderByComparator);
	}

	/**
	 * Returns the friend entry matching the UUID and group.
	 *
	 * @param uuid the friend entry's UUID
	 * @param groupId the primary key of the group
	 * @return the matching friend entry
	 * @throws PortalException if a matching friend entry could not be found
	 */
	@Override
	public FriendEntry getFriendEntryByUuidAndGroupId(String uuid, long groupId)
		throws PortalException {

		return friendEntryPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the friend entries.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>com.ethan.svc.model.impl.FriendEntryModelImpl</code>.
	 * </p>
	 *
	 * @param start the lower bound of the range of friend entries
	 * @param end the upper bound of the range of friend entries (not inclusive)
	 * @return the range of friend entries
	 */
	@Override
	public List<FriendEntry> getFriendEntries(int start, int end) {
		return friendEntryPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of friend entries.
	 *
	 * @return the number of friend entries
	 */
	@Override
	public int getFriendEntriesCount() {
		return friendEntryPersistence.countAll();
	}

	/**
	 * Updates the friend entry in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect FriendEntryLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param friendEntry the friend entry
	 * @return the friend entry that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public FriendEntry updateFriendEntry(FriendEntry friendEntry) {
		return friendEntryPersistence.update(friendEntry);
	}

	/**
	 * Returns the friend entry local service.
	 *
	 * @return the friend entry local service
	 */
	public FriendEntryLocalService getFriendEntryLocalService() {
		return friendEntryLocalService;
	}

	/**
	 * Sets the friend entry local service.
	 *
	 * @param friendEntryLocalService the friend entry local service
	 */
	public void setFriendEntryLocalService(
		FriendEntryLocalService friendEntryLocalService) {

		this.friendEntryLocalService = friendEntryLocalService;
	}

	/**
	 * Returns the friend entry persistence.
	 *
	 * @return the friend entry persistence
	 */
	public FriendEntryPersistence getFriendEntryPersistence() {
		return friendEntryPersistence;
	}

	/**
	 * Sets the friend entry persistence.
	 *
	 * @param friendEntryPersistence the friend entry persistence
	 */
	public void setFriendEntryPersistence(
		FriendEntryPersistence friendEntryPersistence) {

		this.friendEntryPersistence = friendEntryPersistence;
	}

	/**
	 * Returns the guestbook local service.
	 *
	 * @return the guestbook local service
	 */
	public com.ethan.svc.service.GuestbookLocalService
		getGuestbookLocalService() {

		return guestbookLocalService;
	}

	/**
	 * Sets the guestbook local service.
	 *
	 * @param guestbookLocalService the guestbook local service
	 */
	public void setGuestbookLocalService(
		com.ethan.svc.service.GuestbookLocalService guestbookLocalService) {

		this.guestbookLocalService = guestbookLocalService;
	}

	/**
	 * Returns the guestbook persistence.
	 *
	 * @return the guestbook persistence
	 */
	public GuestbookPersistence getGuestbookPersistence() {
		return guestbookPersistence;
	}

	/**
	 * Sets the guestbook persistence.
	 *
	 * @param guestbookPersistence the guestbook persistence
	 */
	public void setGuestbookPersistence(
		GuestbookPersistence guestbookPersistence) {

		this.guestbookPersistence = guestbookPersistence;
	}

	/**
	 * Returns the guestbook entry local service.
	 *
	 * @return the guestbook entry local service
	 */
	public com.ethan.svc.service.GuestbookEntryLocalService
		getGuestbookEntryLocalService() {

		return guestbookEntryLocalService;
	}

	/**
	 * Sets the guestbook entry local service.
	 *
	 * @param guestbookEntryLocalService the guestbook entry local service
	 */
	public void setGuestbookEntryLocalService(
		com.ethan.svc.service.GuestbookEntryLocalService
			guestbookEntryLocalService) {

		this.guestbookEntryLocalService = guestbookEntryLocalService;
	}

	/**
	 * Returns the guestbook entry persistence.
	 *
	 * @return the guestbook entry persistence
	 */
	public GuestbookEntryPersistence getGuestbookEntryPersistence() {
		return guestbookEntryPersistence;
	}

	/**
	 * Sets the guestbook entry persistence.
	 *
	 * @param guestbookEntryPersistence the guestbook entry persistence
	 */
	public void setGuestbookEntryPersistence(
		GuestbookEntryPersistence guestbookEntryPersistence) {

		this.guestbookEntryPersistence = guestbookEntryPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService
		getCounterLocalService() {

		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService
			counterLocalService) {

		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService
		getClassNameLocalService() {

		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService
			classNameLocalService) {

		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {

		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService
		getResourceLocalService() {

		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService
			resourceLocalService) {

		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService
		getUserLocalService() {

		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {

		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register(
			"com.ethan.svc.model.FriendEntry", friendEntryLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.ethan.svc.model.FriendEntry");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return FriendEntryLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return FriendEntry.class;
	}

	protected String getModelClassName() {
		return FriendEntry.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = friendEntryPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception exception) {
			throw new SystemException(exception);
		}
	}

	@BeanReference(type = FriendEntryLocalService.class)
	protected FriendEntryLocalService friendEntryLocalService;

	@BeanReference(type = FriendEntryPersistence.class)
	protected FriendEntryPersistence friendEntryPersistence;

	@BeanReference(type = com.ethan.svc.service.GuestbookLocalService.class)
	protected com.ethan.svc.service.GuestbookLocalService guestbookLocalService;

	@BeanReference(type = GuestbookPersistence.class)
	protected GuestbookPersistence guestbookPersistence;

	@BeanReference(
		type = com.ethan.svc.service.GuestbookEntryLocalService.class
	)
	protected com.ethan.svc.service.GuestbookEntryLocalService
		guestbookEntryLocalService;

	@BeanReference(type = GuestbookEntryPersistence.class)
	protected GuestbookEntryPersistence guestbookEntryPersistence;

	@ServiceReference(
		type = com.liferay.counter.kernel.service.CounterLocalService.class
	)
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.ClassNameLocalService.class
	)
	protected com.liferay.portal.kernel.service.ClassNameLocalService
		classNameLocalService;

	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.ResourceLocalService.class
	)
	protected com.liferay.portal.kernel.service.ResourceLocalService
		resourceLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.UserLocalService.class
	)
	protected com.liferay.portal.kernel.service.UserLocalService
		userLocalService;

	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;

	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry
		persistedModelLocalServiceRegistry;

}